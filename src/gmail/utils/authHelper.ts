/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */

import http from "http";
import { URL } from "url";
import open from "open";

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * @param port - –ü–æ—Ä—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
 * @returns Promise —Å –∫–æ–¥–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
export async function startAuthServer(port: number = 3000): Promise<string> {
  return new Promise((resolve, reject) => {
    const server = http.createServer((req, res) => {
      if (!req.url) {
        res.writeHead(400);
        res.end("Bad Request");
        return;
      }

      const url = new URL(req.url, `http://localhost:${port}`);
      const code = url.searchParams.get("code");
      const error = url.searchParams.get("error");

      if (error) {
        res.writeHead(200, { "Content-Type": "text/html; charset=utf-8" });
        res.end(`
          <html>
            <body style="font-family: Arial, sans-serif; padding: 40px; text-align: center;">
              <h1 style="color: #d32f2f;">‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</h1>
              <p>–û—à–∏–±–∫–∞: ${error}</p>
              <p>–ó–∞–∫—Ä–æ–π—Ç–µ —ç—Ç–æ –æ–∫–Ω–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.</p>
            </body>
          </html>
        `);
        server.close();
        reject(new Error(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${error}`));
        return;
      }

      if (code) {
        res.writeHead(200, { "Content-Type": "text/html; charset=utf-8" });
        res.end(`
          <html>
            <body style="font-family: Arial, sans-serif; padding: 40px; text-align: center;">
              <h1 style="color: #4caf50;">‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!</h1>
              <p>–ö–æ–¥ –ø–æ–ª—É—á–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —ç—Ç–æ –æ–∫–Ω–æ.</p>
              <div style="margin-top: 20px; padding: 20px; background: #f5f5f5; border-radius: 5px;">
                <p style="margin: 0; color: #666;">–ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:</p>
                <code style="display: block; margin-top: 10px; padding: 10px; background: #fff; border: 1px solid #ddd; border-radius: 3px; word-break: break-all;">
                  ${code}
                </code>
              </div>
            </body>
          </html>
        `);
        server.close();
        resolve(code);
        return;
      }

      // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
      res.writeHead(200, { "Content-Type": "text/html; charset=utf-8" });
      res.end(`
        <html>
          <body style="font-family: Arial, sans-serif; padding: 40px; text-align: center;">
            <h1>üîê Gmail OAuth2 –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</h1>
            <p>–û–∂–∏–¥–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...</p>
          </body>
        </html>
      `);
    });

    server.on("error", reject);

    server.listen(port, () => {
      console.log(`\nüåê –°–µ—Ä–≤–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${port}`);
    });
  });
}

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º
 * @param authUrl - URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * @param port - –ü–æ—Ä—Ç –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
 * @returns –ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
export async function authorizeWithLocalServer(
  authUrl: string,
  port: number = 3000
): Promise<string> {
  console.log("\nüöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...");

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
  const codePromise = startAuthServer(port);

  // –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
  console.log("üì± –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...");
  try {
    await open(authUrl);
  } catch (error: unknown) {
    console.log("\n‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä.");
    console.log("–û—Ç–∫—Ä–æ–π—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Å—Å—ã–ª–∫—É –≤—Ä—É—á–Ω—É—é:");
    console.log(authUrl);
  }

  // –ñ–¥–µ–º –∫–æ–¥
  console.log("\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...");
  const code = await codePromise;
  
  console.log("\n‚úÖ –ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω!");
  return code;
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–¥ –∏–∑ URL —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
 * @param redirectUrl - –ü–æ–ª–Ω—ã–π URL –ø–æ—Å–ª–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
 * @returns –ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ null
 */
export function extractCodeFromUrl(redirectUrl: string): string | null {
  try {
    const url = new URL(redirectUrl);
    return url.searchParams.get("code");
  } catch {
    // –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∫–æ–¥ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º
    const match = redirectUrl.match(/[?&]code=([^&]+)/);
    return match ? match[1] : null;
  }
}

/**
 * –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ URL —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
 * @returns –ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
export async function promptForRedirectUrl(): Promise<string> {
  const readline = require("readline").createInterface({
    input: process.stdin,
    output: process.stdout,
  });

  return new Promise((resolve, reject) => {
    console.log("\nüìã –ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–∏–¥–∞:");
    console.log("   http://localhost/?code=4/0AUJR-x52Q2Qys8...&scope=...");
    console.log("\nüîó –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ü–û–õ–ù–´–ô URL –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞:\n");

    readline.question("URL: ", (url: string) => {
      readline.close();
      
      const code = extractCodeFromUrl(url.trim());
      if (code) {
        console.log("\n‚úÖ –ö–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω:", code.substring(0, 20) + "...");
        resolve(code);
      } else {
        reject(new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–æ–¥ –∏–∑ URL"));
      }
    });
  });
}