/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OAuth2 –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π Google
 */

import { google, Auth } from "googleapis";
import readline from "readline";
import fs from "fs/promises";
import path from "path";
import {
  type OAuth2Token,
  type OAuth2Credentials,
  type CredentialsFile,
  GmailAuthError,
} from "../types/models";

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è OAuth2 –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
 */
export class OAuth2Manager {
  private oauth2Client: Auth.OAuth2Client;
  private credentials: OAuth2Credentials;
  private scopes: string[];

  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä OAuth2Manager
   * @param credentials - –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ OAuth2
   * @param scopes - –û–±–ª–∞—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–∞
   * @param useOobRedirect - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å OOB redirect –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–æ–¥–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
   */
  constructor(
    credentials: OAuth2Credentials, 
    scopes: string[] = [],
    useOobRedirect: boolean = true
  ) {
    this.credentials = credentials;
    this.scopes = scopes.length > 0 ? scopes : [
      "https://www.googleapis.com/auth/gmail.readonly",
      "https://www.googleapis.com/auth/gmail.modify",
    ];

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º OOB redirect URI –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–æ–¥–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏–ª–∏ –±–µ—Ä–µ–º –∏–∑ credentials
    const redirectUri = useOobRedirect 
      ? "urn:ietf:wg:oauth:2.0:oob"
      : credentials.redirect_uris[0];

    // –°–æ–∑–¥–∞–µ–º OAuth2 –∫–ª–∏–µ–Ω—Ç
    this.oauth2Client = new google.auth.OAuth2(
      credentials.client_id,
      credentials.client_secret,
      redirectUri,
    );
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç OAuth2Manager –∏–∑ —Ñ–∞–π–ª–∞ credentials
   * @param credentialsPath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É credentials.json
   * @param scopes - –û–±–ª–∞—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–∞
   * @param useOobRedirect - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å OOB redirect –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–æ–¥–∞
   */
  static async fromCredentialsFile(
    credentialsPath: string,
    scopes?: string[],
    useOobRedirect: boolean = true,
  ): Promise<OAuth2Manager> {
    const content = await fs.readFile(credentialsPath, "utf-8");
    const credentials = JSON.parse(content) as CredentialsFile;

    const oauth2Credentials = credentials.installed || credentials.web;
    if (!oauth2Credentials) {
      throw new GmailAuthError(
        "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ credentials.json",
      );
    }

    return new OAuth2Manager(oauth2Credentials, scopes, useOobRedirect);
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç OAuth2Manager –∏–∑ JSON —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –æ–±—ä–µ–∫—Ç–∞
   * @param credentialsJson - JSON —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –æ–±—ä–µ–∫—Ç —Å credentials
   * @param scopes - –û–±–ª–∞—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–∞
   * @param useOobRedirect - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å OOB redirect –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–æ–¥–∞
   */
  static fromCredentialsJson(
    credentialsJson: string | CredentialsFile,
    scopes?: string[],
    useOobRedirect: boolean = true,
  ): OAuth2Manager {
    const credentials =
      typeof credentialsJson === "string"
        ? (JSON.parse(credentialsJson) as CredentialsFile)
        : credentialsJson;

    const oauth2Credentials = credentials.installed || credentials.web;
    if (!oauth2Credentials) {
      throw new GmailAuthError(
        "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç credentials",
      );
    }

    return new OAuth2Manager(oauth2Credentials, scopes, useOobRedirect);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   * @param state - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π state –ø–∞—Ä–∞–º–µ—Ç—Ä
   * @returns URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   */
  getAuthUrl(state?: string): string {
    return this.oauth2Client.generateAuthUrl({
      access_type: "offline",
      scope: this.scopes,
      state,
    });
  }

  /**
   * –ê–≤—Ç–æ—Ä–∏–∑—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å
   * @returns –¢–æ–∫–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   */
  async authorizeInteractive(): Promise<OAuth2Token> {
    const authUrl = this.getAuthUrl();

    console.log("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Gmail:");
    console.log("1. –û—Ç–∫—Ä–æ–π—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ:");
    console.log(authUrl);
    console.log("2. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–π —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏");
    console.log("3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");

    const code = await this.promptForCode();
    return await this.getTokenFromCode(code);
  }

  /**
   * –ê–≤—Ç–æ—Ä–∏–∑—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–º–æ—â—å—é –ø–æ–º–æ—â–Ω–∏–∫–∞
   * @returns –¢–æ–∫–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   */
  async authorizeWithHelper(): Promise<OAuth2Token> {
    const { promptForRedirectUrl } = await import("./authHelper");
    const authUrl = this.getAuthUrl();

    console.log("\nüîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Gmail:");
    console.log("–û—Ç–∫—Ä–æ–π—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ:");
    console.log("\n" + authUrl);

    const code = await promptForRedirectUrl();
    return await this.getTokenFromCode(code);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã –ø–æ –∫–æ–¥—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   * @param code - –ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   * @returns –¢–æ–∫–µ–Ω—ã
   */
  async getTokenFromCode(code: string): Promise<OAuth2Token> {
    try {
      const { tokens } = await this.oauth2Client.getToken(code);
      
      if (!tokens.access_token) {
        throw new GmailAuthError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å access token");
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã –≤ –∫–ª–∏–µ–Ω—Ç
      this.oauth2Client.setCredentials(tokens);

      return tokens as OAuth2Token;
    } catch (error: unknown) {
      if (error instanceof Error) {
        throw new GmailAuthError(
          `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: ${error.message}`,
        );
      }
      throw new GmailAuthError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞");
    }
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã –≤ OAuth2 –∫–ª–∏–µ–Ω—Ç
   * @param tokens - –¢–æ–∫–µ–Ω—ã
   */
  setTokens(tokens: OAuth2Token): void {
    this.oauth2Client.setCredentials(tokens);
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç access token –∏—Å–ø–æ–ª—å–∑—É—è refresh token
   * @returns –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
   */
  async refreshTokens(): Promise<OAuth2Token> {
    try {
      const { credentials } = await this.oauth2Client.refreshAccessToken();
      return credentials as OAuth2Token;
    } catch (error: unknown) {
      if (error instanceof Error) {
        throw new GmailAuthError(
          `–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: ${error.message}`,
        );
      }
      throw new GmailAuthError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞");
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å—Ç–µ–∫ –ª–∏ —Ç–æ–∫–µ–Ω
   * @param tokens - –¢–æ–∫–µ–Ω—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
   * @returns true –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫
   */
  isTokenExpired(tokens: OAuth2Token): boolean {
    if (!tokens.expiry_date) {
      return false;
    }
    return Date.now() >= tokens.expiry_date;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç OAuth2 –∫–ª–∏–µ–Ω—Ç
   * @returns OAuth2Client
   */
  getOAuth2Client(): Auth.OAuth2Client {
    return this.oauth2Client;
  }

  /**
   * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns –ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   */
  private promptForCode(): Promise<string> {
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout,
    });

    return new Promise((resolve) => {
      rl.question("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ", (code) => {
        rl.close();
        resolve(code.trim());
      });
    });
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–∫–µ–Ω—ã –≤ —Ñ–∞–π–ª
 * @param tokens - –¢–æ–∫–µ–Ω—ã
 * @param filePath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
 */
export async function saveTokensToFile(
  tokens: OAuth2Token,
  filePath: string,
): Promise<void> {
  await fs.mkdir(path.dirname(filePath), { recursive: true });
  await fs.writeFile(filePath, JSON.stringify(tokens, null, 2));
  console.log(`[OAuth2] –¢–æ–∫–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ${filePath}`);
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞
 * @param filePath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
 * @returns –¢–æ–∫–µ–Ω—ã –∏–ª–∏ null
 */
export async function loadTokensFromFile(
  filePath: string,
): Promise<OAuth2Token | null> {
  try {
    const content = await fs.readFile(filePath, "utf-8");
    return JSON.parse(content) as OAuth2Token;
  } catch (error: unknown) {
    if (error instanceof Error && 'code' in error && (error as any).code === "ENOENT") {
      return null;
    }
    throw error;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∞—Ç –ª–∏ —Ç–æ–∫–µ–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ scopes
 * @param tokens - –¢–æ–∫–µ–Ω—ã
 * @param requiredScopes - –¢—Ä–µ–±—É–µ–º—ã–µ scopes
 * @returns true –µ—Å–ª–∏ –≤—Å–µ scopes –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
 */
export function hasRequiredScopes(
  tokens: OAuth2Token,
  requiredScopes: string[],
): boolean {
  if (!tokens.scope) {
    return false;
  }

  const tokenScopes = tokens.scope.split(" ");
  return requiredScopes.every((scope) => tokenScopes.includes(scope));
}