/**
 * –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Gate.io –º–æ–¥—É–ª—è
 */

import { GateAccountManager } from '../index';

async function basicExample() {
  // –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤
  const manager = new GateAccountManager({
    cookiesDir: './data/gate-cookies',
    rateLimiterOptions: {
      maxRequests: 240,        // 240 –∑–∞–ø—Ä–æ—Å–æ–≤
      windowMs: 60000         // –≤ –º–∏–Ω—É—Ç—É
    },
    autoSaveCookies: true     // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å cookies
  });

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
  await manager.initialize();

  try {
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—Ö–æ–¥–∏–º
    await manager.addAccount('user@example.com', 'password123');
    console.log('‚úÖ –ê–∫–∫–∞—É–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');

    // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
    const balance = await manager.getBalance('user@example.com', 'RUB');
    console.log(`üí∞ –ë–∞–ª–∞–Ω—Å: ${balance.balance} RUB`);
    console.log(`   –î–æ—Å—Ç—É–ø–Ω–æ: ${balance.available} RUB`);
    console.log(`   –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${balance.locked} RUB`);

    // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const transactions = await manager.getAvailableTransactions('user@example.com');
    console.log(`\nüìã –ù–∞–π–¥–µ–Ω–æ ${transactions.length} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    if (transactions.length > 0) {
      const tx = transactions[0];
      console.log(`\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${tx.id}:`);
      console.log(`   –°—É–º–º–∞: ${tx.amount.trader['643']} RUB`);
      console.log(`   –ú–µ—Ç–æ–¥: ${tx.method.label}`);

      // –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      await manager.acceptTransaction('user@example.com', tx.id.toString());
      console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞');

      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Å —á–µ–∫–æ–º (–µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª)
      // await manager.approveTransactionWithReceipt(
      //   'user@example.com',
      //   tx.id.toString(),
      //   './receipts/receipt.pdf'
      // );
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    const accounts = manager.getAccounts();
    console.log('\nüë• –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:');
    accounts.forEach(acc => {
      console.log(`   - ${acc.email}: ${acc.isActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}, Cookies: ${acc.hasCookies ? '–ï—Å—Ç—å' : '–ù–µ—Ç'}`);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É rate limiter
    const stats = manager.getRateLimiterStats();
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Rate Limiter:');
    console.log(`   –¢–µ–∫—É—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${stats.currentRequests}/${stats.maxRequests}`);
    console.log(`   –í –æ—á–µ—Ä–µ–¥–∏: ${stats.queueLength}`);

  } catch (error: unknown) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä
if (require.main === module) {
  basicExample()
    .then(() => console.log('\n‚úÖ –ü—Ä–∏–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω'))
    .catch((error: unknown) => console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error));
}