/**
 * –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
 */

import { GateAccountManager, SessionExpiredError } from '../index';

async function multiAccountExample() {
  const manager = new GateAccountManager({
    cookiesDir: './data/gate-cookies',
    rateLimiterOptions: {
      maxRequests: 240,
      windowMs: 60000
    }
  });

  await manager.initialize();

  // –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
  const accounts = [
    { email: 'account1@example.com', password: 'pass1' },
    { email: 'account2@example.com', password: 'pass2' },
    { email: 'account3@example.com', password: 'pass3' }
  ];

  // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã
  console.log('üîê –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤...');
  for (const account of accounts) {
    try {
      await manager.addAccount(account.email, account.password, true);
      console.log(`‚úÖ ${account.email} - –¥–æ–±–∞–≤–ª–µ–Ω`);
    } catch (error: unknown) {
      const message = error instanceof Error ? error.message : String(error);
      console.error(`‚ùå ${account.email} - –æ—à–∏–±–∫–∞:`, message);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å—ã –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
  console.log('\nüí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤:');
  for (const account of accounts) {
    try {
      const balance = await manager.getBalance(account.email);
      console.log(`   ${account.email}: ${balance.balance} RUB`);
    } catch (error: unknown) {
      const message = error instanceof Error ? error.message : String(error);
      console.error(`   ${account.email}: –û—à–∏–±–∫–∞ - ${message}`);
    }
  }

  // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
  console.log('\nüìã –°–±–æ—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:');
  const allTransactions = [];
  
  for (const account of accounts) {
    try {
      const transactions = await manager.getAvailableTransactions(account.email);
      console.log(`   ${account.email}: ${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      
      // –î–æ–±–∞–≤–ª—è–µ–º email –∫ –∫–∞–∂–¥–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
      transactions.forEach(tx => {
        allTransactions.push({ ...tx, accountEmail: account.email });
      });
    } catch (error: unknown) {
      const message = error instanceof Error ? error.message : String(error);
      console.error(`   ${account.email}: –û—à–∏–±–∫–∞ - ${message}`);
    }
  }

  console.log(`\nüìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ ${allTransactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);

  // –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è withAutoRelogin –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
  console.log('\nüîÑ –ü—Ä–∏–º–µ—Ä —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –≤—Ö–æ–¥–æ–º:');
  
  for (const account of accounts) {
    try {
      const result = await manager.withAutoRelogin(
        account.email,
        async (client) => {
          // –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞, –µ—Å–ª–∏ —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞
          const balance = await client.getBalance('RUB');
          const transactions = await client.getAvailableTransactions();
          
          return {
            balance: balance.balance.toString(),
            transactionCount: transactions.length
          };
        }
      );
      
      console.log(`   ${account.email}: –ë–∞–ª–∞–Ω—Å ${result.balance} RUB, ${result.transactionCount} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
    } catch (error: unknown) {
      const message = error instanceof Error ? error.message : String(error);
      console.error(`   ${account.email}: –û—à–∏–±–∫–∞ - ${message}`);
    }
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç—ã rate limiter –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
  console.log('\n‚öôÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤:');
  manager.updateRateLimits(300, 60000); // 300 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
  console.log('   –ù–æ–≤—ã–π –ª–∏–º–∏—Ç: 300 –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω');

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ cookies
  console.log('\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ cookies:');
  await manager.saveAllCookies();
  console.log('   –í—Å–µ cookies —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const finalStats = manager.getRateLimiterStats();
  console.log('\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
  console.log(`   –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${finalStats.currentRequests}`);
  console.log(`   –ú–∞–∫—Å–∏–º—É–º: ${finalStats.maxRequests}`);
  console.log(`   –í –æ—á–µ—Ä–µ–¥–∏: ${finalStats.queueLength}`);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä
if (require.main === module) {
  multiAccountExample()
    .then(() => console.log('\n‚úÖ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã'))
    .catch((error: unknown) => console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error));
}