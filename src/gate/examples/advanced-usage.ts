/**
 * –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Gate.io –º–æ–¥—É–ª—è
 */

import { 
  GateAccountManager, 
  GateClient,
  RateLimiter,
  TransactionStatus,
  GateApiError,
  CloudflareError,
  SessionExpiredError,
  RateLimitError
} from '../index';
import path from 'path';

/**
 * –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
 */
async function errorHandlingExample(manager: GateAccountManager) {
  console.log('\nüõ°Ô∏è –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫:');
  
  try {
    await manager.getBalance('test@example.com');
  } catch (error: unknown) {
    if (error instanceof SessionExpiredError) {
      console.log('   –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥');
    } else if (error instanceof CloudflareError) {
      console.log('   –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∑–∞—â–∏—Ç–∞ Cloudflare');
    } else if (error instanceof RateLimitError) {
      console.log(`   –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${error.retryAfter} —Å–µ–∫`);
    } else if (error instanceof GateApiError) {
      console.log(`   –û—à–∏–±–∫–∞ API: ${error.message} (–∫–æ–¥: ${error.code})`);
    } else {
      console.log(`   –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    }
  }
}

/**
 * –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
 */
async function transactionProcessingExample(manager: GateAccountManager, email: string) {
  console.log('\nüí∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:');
  
  const client = manager.getClient(email);
  
  // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º
  const pendingTx = await client.getTransactionsWithFilter({
    status: [TransactionStatus.PENDING, TransactionStatus.IN_PROGRESS],
    limit: 10,
    page: 1
  });
  
  console.log(`   –ù–∞–π–¥–µ–Ω–æ ${pendingTx.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
  
  for (const tx of pendingTx) {
    console.log(`\n   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${tx.id}:`);
    console.log(`     –°—Ç–∞—Ç—É—Å: ${tx.status}`);
    console.log(`     –°—É–º–º–∞: ${tx.amount} ${tx.currency}`);
    console.log(`     –ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: ${tx.paymentMethod}`);
    console.log(`     –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${tx.buyerName}`);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    if (tx.status === TransactionStatus.PENDING) {
      // –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      await client.acceptTransaction(tx.id);
      console.log('     ‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É');
    } else if (tx.status === TransactionStatus.IN_PROGRESS) {
      // –ú–æ–∂–µ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å
      console.log('     ‚è≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ');
    }
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
  const history = await client.getHistoryTransactions(1);
  console.log(`\n   üìú –ò—Å—Ç–æ—Ä–∏—è: ${history.length} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
}

/**
 * –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å cookies
 */
async function cookieManagementExample() {
  console.log('\nüç™ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ cookies:');
  
  // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º rate limiter
  const rateLimiter = new RateLimiter({
    maxRequests: 100,
    windowMs: 30000 // 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ 30 —Å–µ–∫—É–Ω–¥
  });
  
  const client = new GateClient(rateLimiter, {
    baseUrl: 'https://panel.gate.cx/api/v1',
    timeout: 15000
  });
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º cookies –∏–∑ —Ñ–∞–π–ª–∞
  const cookiesPath = path.join('./data/gate-cookies', 'manual-account.json');
  await client.loadCookies(cookiesPath);
  console.log('   Cookies –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
  if (await client.isAuthenticated()) {
    console.log('   ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ cookies —É—Å–ø–µ—à–Ω–∞');
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
    const balance = await client.getBalance('RUB');
    console.log(`   –ë–∞–ª–∞–Ω—Å: ${balance.balance} RUB`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ cookies
    await client.saveCookies(cookiesPath);
    console.log('   Cookies –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
  } else {
    console.log('   ‚ùå Cookies –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã, —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—Ö–æ–¥');
  }
}

/**
 * –ü—Ä–∏–º–µ—Ä –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ rate limiter
 */
async function rateLimiterMonitoring(manager: GateAccountManager) {
  console.log('\nüìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Rate Limiter:');
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const showStats = () => {
    const stats = manager.getRateLimiterStats();
    const percentage = (stats.currentRequests / stats.maxRequests * 100).toFixed(1);
    const bar = '‚ñà'.repeat(Math.floor(percentage / 10)) + '‚ñë'.repeat(10 - Math.floor(percentage / 10));
    
    console.log(`   [${bar}] ${stats.currentRequests}/${stats.maxRequests} (${percentage}%)`);
    console.log(`   –û—á–µ—Ä–µ–¥—å: ${stats.queueLength} –∑–∞–ø—Ä–æ—Å–æ–≤`);
    
    if (stats.currentRequests >= stats.maxRequests * 0.8) {
      console.log('   ‚ö†Ô∏è –ü—Ä–∏–±–ª–∏–∂–∞–µ–º—Å—è –∫ –ª–∏–º–∏—Ç—É!');
    }
  };
  
  // –°–æ–∑–¥–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫—É
  console.log('   –°–æ–∑–¥–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫—É...');
  const promises = [];
  
  for (let i = 0; i < 10; i++) {
    promises.push(
      manager.withAutoRelogin('test@example.com', async (client) => {
        await new Promise(resolve => setTimeout(resolve, 100));
        return i;
      }).catch(() => {
        // –ù–∞–º–µ—Ä–µ–Ω–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
      })
    );
    
    if (i % 3 === 0) {
      showStats();
      await new Promise(resolve => setTimeout(resolve, 500));
    }
  }
  
  await Promise.all(promises);
  console.log('\n   –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
  showStats();
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
 */
async function runAdvancedExamples() {
  const manager = new GateAccountManager({
    cookiesDir: './data/gate-cookies',
    rateLimiterOptions: {
      maxRequests: 240,
      windowMs: 60000
    },
    autoSaveCookies: true
  });
  
  await manager.initialize();
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç
  try {
    await manager.addAccount('test@example.com', 'testpass', false);
  } catch (error: unknown) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω
  }
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
  await errorHandlingExample(manager);
  
  // –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ:
  // await transactionProcessingExample(manager, 'real@example.com');
  // await cookieManagementExample();
  
  await rateLimiterMonitoring(manager);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
if (require.main === module) {
  runAdvancedExamples()
    .then(() => console.log('\n‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã'))
    .catch((error: unknown) => console.error('‚ùå –û—à–∏–±–∫–∞:', error));
}