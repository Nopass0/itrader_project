import { BybitClient } from "@/bybit/client";

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
 * –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */

async function extractPaymentMethodsAndCreateAd() {
  console.log("=== –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã –∏–∑ —Ä—ã–Ω–∫–∞ ===\n");
  
  const client = new BybitClient();
  
  try {
    // 1. –ü–æ–¥–∫–ª—é—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
    const accountId = await client.addAccount(
      "ysfXg4bN0vRMwlwYuI",
      "aIxbRqs8oqoDoqwGjEQTFsjDg68WsAxOns4n",
      false,
      "Payment Extractor",
    );
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    console.log("üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞...");
    const balances = await client.getP2PBalances(accountId);
    const usdtBalance = balances.find(b => b.coin === "USDT");
    console.log(`   USDT: ${usdtBalance?.free || "0"}\n`);
    
    if (!usdtBalance || parseFloat(usdtBalance.free) < 10) {
      console.log("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è");
      return;
    }
    
    // 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—ã–Ω–æ–∫ –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã
    console.log("üîç –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π...");
    
    const marketAds = await client.searchP2PAds(accountId, {
      tokenId: "USDT",
      currencyId: "RUB",
      side: "1", // –ø—Ä–æ–¥–∞–∂–∞
      page: 1,
      size: 30,
    });
    
    if (!marketAds.list || marketAds.list.length === 0) {
      console.log("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π");
      return;
    }
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${marketAds.list.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n`);
    
    // –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã
    const paymentMethodsMap = new Map<string, {
      count: number;
      examples: string[];
    }>();
    
    const priceData: number[] = [];
    
    marketAds.list.forEach(ad => {
      // –°–æ–±–∏—Ä–∞–µ–º —Ü–µ–Ω—ã
      priceData.push(parseFloat(ad.price));
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã
      if (ad.payments && Array.isArray(ad.payments)) {
        ad.payments.forEach(payment => {
          if (!paymentMethodsMap.has(payment)) {
            paymentMethodsMap.set(payment, { count: 0, examples: [] });
          }
          const data = paymentMethodsMap.get(payment)!;
          data.count++;
          if (data.examples.length < 3 && !data.examples.includes(ad.nickName)) {
            data.examples.push(ad.nickName);
          }
        });
      }
    });
    
    // –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω
    const avgPrice = priceData.reduce((a, b) => a + b, 0) / priceData.length;
    const minPrice = Math.min(...priceData);
    const maxPrice = Math.max(...priceData);
    
    console.log("üìä –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω:");
    console.log(`   –°—Ä–µ–¥–Ω—è—è: ${avgPrice.toFixed(2)} RUB`);
    console.log(`   –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: ${minPrice.toFixed(2)} RUB`);
    console.log(`   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: ${maxPrice.toFixed(2)} RUB\n`);
    
    // –ê–Ω–∞–ª–∏–∑ –º–µ—Ç–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã
    console.log("üí≥ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã:");
    
    const sortedPaymentMethods = Array.from(paymentMethodsMap.entries())
      .sort((a, b) => b[1].count - a[1].count);
    
    if (sortedPaymentMethods.length === 0) {
      console.log("   –ú–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç–∞—Ö API\n");
      
      // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
      console.log("üìÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –æ–±—ä—è–≤–ª–µ–Ω–∏–π...");
      
      for (let i = 0; i < Math.min(3, marketAds.list.length); i++) {
        const ad = marketAds.list[i];
        try {
          const detail = await client.getP2PAdDetail(accountId, ad.id);
          
          console.log(`\n–û–±—ä—è–≤–ª–µ–Ω–∏–µ ${i + 1} (${detail.nickName}):`);
          console.log(`   –¶–µ–Ω–∞: ${detail.price} RUB`);
          
          if (detail.tradeMethods && detail.tradeMethods.length > 0) {
            console.log(`   –ú–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã:`);
            detail.tradeMethods.forEach(method => {
              console.log(`   - ${method.payType}`);
              if (method.bankName) console.log(`     –ë–∞–Ω–∫: ${method.bankName}`);
            });
          }
        } catch (error) {
          console.log(`   –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏: ${error.message}`);
        }
      }
    } else {
      sortedPaymentMethods.forEach(([method, data]) => {
        const percentage = (data.count / marketAds.list.length * 100).toFixed(1);
        console.log(`   ${method}: ${data.count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π (${percentage}%)`);
        console.log(`     –ò—Å–ø–æ–ª—å–∑—É—é—Ç: ${data.examples.join(", ")}`);
      });
    }
    
    // 4. –°–æ–∑–¥–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    console.log("\n\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞...");
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—É—é —Ü–µ–Ω—É (—á—É—Ç—å –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–π)
    const competitivePrice = (avgPrice * 0.998).toFixed(2); // –ù–∞ 0.2% –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–π
    const quantity = Math.min(parseFloat(usdtBalance.free) * 0.5, 100); // 50% –±–∞–ª–∞–Ω—Å–∞, –º–∞–∫—Å 100
    
    console.log(`   –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è —Ü–µ–Ω–∞: ${competitivePrice} RUB`);
    console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${quantity.toFixed(2)} USDT`);
    
    // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—á–∏–µ ID –º–µ—Ç–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã
    const possiblePaymentIds = [
      "1", "2", "3", "4", "5", // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ ID
      "bank_transfer", "sberbank", "tinkoff", // –í–æ–∑–º–æ–∂–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ ID
      "yoomoney", "qiwi", "card", // –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏
    ];
    
    console.log("\nüîß –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å —Ä–∞–∑–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ –æ–ø–ª–∞—Ç—ã...\n");
    
    for (const paymentId of possiblePaymentIds) {
      console.log(`–ü—Ä–æ–±—É–µ–º —Å payment ID: "${paymentId}"`);
      
      try {
        const result = await client.createP2PAd(accountId, {
          tokenId: "USDT",
          currencyId: "RUB",
          side: "1", // –ø—Ä–æ–¥–∞–∂–∞
          priceType: "0", // —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞
          price: competitivePrice,
          quantity: quantity.toFixed(2),
          minAmount: (parseFloat(competitivePrice) * 10).toFixed(2), // –ú–∏–Ω 10 USDT
          maxAmount: (parseFloat(competitivePrice) * quantity).toFixed(2),
          paymentPeriod: "15",
          paymentIds: [paymentId],
          remark: "–ë—ã—Å—Ç—Ä—ã–π —Ä–µ–ª–∏–∑! –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä 24/7",
          tradingPreferenceSet: {
            isFilterBlockedUser: true,
            completeRatePercent: 80,
          },
          itemType: "ORIGIN",
        });
        
        console.log(`‚úÖ –£—Å–ø–µ—Ö! –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —Å ID: ${result.itemId}`);
        console.log(`   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω payment ID: "${paymentId}"`);
        break;
        
      } catch (error: any) {
        if (error.message.includes("912300013")) {
          console.log(`   ‚ùå Payment ID "${paymentId}" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        } else if (error.message.includes("912120022")) {
          console.log(`   ‚ùå –¶–µ–Ω–∞ –≤–Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞`);
        } else {
          console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        }
      }
    }
    
    // 5. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ–∑ –º–µ—Ç–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã
    console.log("\n\nüîß –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã...");
    
    try {
      const result = await client.createP2PAd(accountId, {
        tokenId: "USDT",
        currencyId: "RUB",
        side: "1",
        priceType: "0",
        price: competitivePrice,
        quantity: quantity.toFixed(2),
        minAmount: (parseFloat(competitivePrice) * 10).toFixed(2),
        maxAmount: (parseFloat(competitivePrice) * quantity).toFixed(2),
        paymentPeriod: "15",
        paymentIds: [], // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
        remark: "Professional P2P trader",
        tradingPreferenceSet: {},
        itemType: "ORIGIN",
      });
      
      console.log(`‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –±–µ–∑ –º–µ—Ç–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã!`);
      console.log(`   ID: ${result.itemId}`);
      
    } catch (error: any) {
      console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–µ–∑ –º–µ—Ç–æ–¥–æ–≤: ${error.message}`);
    }
    
  } catch (error: any) {
    console.error("\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error.message);
  }
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—á–∏—Ö –º–µ—Ç–æ–¥–æ–≤
async function findWorkingPaymentMethods() {
  console.log("\n\n=== –ü–æ–∏—Å–∫ —Ä–∞–±–æ—á–∏—Ö –º–µ—Ç–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã ===\n");
  
  const client = new BybitClient();
  const accountId = await client.addAccount(
    "ysfXg4bN0vRMwlwYuI",
    "aIxbRqs8oqoDoqwGjEQTFsjDg68WsAxOns4n",
    false,
  );
  
  // –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const testIds = [];
  
  // –ß–∏—Å–ª–æ–≤—ã–µ ID
  for (let i = 1; i <= 20; i++) {
    testIds.push(i.toString());
  }
  
  // –¢–µ–∫—Å—Ç–æ–≤—ã–µ ID
  const textIds = [
    "BANK", "BANK_TRANSFER", "BANK_CARD",
    "SBERBANK", "TINKOFF", "VTB", "ALFA",
    "YOOMONEY", "QIWI", "WEBMONEY",
    "CARD", "CASH", "SBP",
  ];
  
  testIds.push(...textIds);
  testIds.push(...textIds.map(id => id.toLowerCase()));
  
  console.log(`–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${testIds.length} –≤–æ–∑–º–æ–∂–Ω—ã—Ö ID...\n`);
  
  const workingIds: string[] = [];
  const quantity = "10"; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ç–µ—Å—Ç–∞
  
  for (const id of testIds) {
    process.stdout.write(`–¢–µ—Å—Ç "${id}"... `);
    
    try {
      await client.createP2PAd(accountId, {
        tokenId: "USDT",
        currencyId: "RUB",
        side: "1",
        priceType: "0",
        price: "85.00",
        quantity: quantity,
        minAmount: "850",
        maxAmount: "850",
        paymentPeriod: "15",
        paymentIds: [id],
        remark: "Test",
        tradingPreferenceSet: {},
        itemType: "ORIGIN",
      });
      
      console.log("‚úÖ –†–ê–ë–û–¢–ê–ï–¢!");
      workingIds.push(id);
      
      // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
      // await client.deleteP2PAd(accountId, result.itemId);
      
    } catch (error: any) {
      if (error.message.includes("912300013")) {
        console.log("‚ùå");
      } else {
        console.log(`‚ö†Ô∏è ${error.message.slice(0, 30)}...`);
      }
    }
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 100));
  }
  
  if (workingIds.length > 0) {
    console.log(`\n\n‚úÖ –ù–∞–π–¥–µ–Ω–æ ${workingIds.length} —Ä–∞–±–æ—á–∏—Ö ID:`);
    workingIds.forEach(id => console.log(`   - "${id}"`));
  } else {
    console.log("\n\n‚ùå –†–∞–±–æ—á–∏–µ ID –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
  }
}

// –ó–∞–ø—É—Å–∫
extractPaymentMethodsAndCreateAd()
  .then(() => findWorkingPaymentMethods())
  .then(() => {
    console.log("\n\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!");
    process.exit(0);
  })
  .catch((error) => {
    console.error("–û—à–∏–±–∫–∞:", error);
    process.exit(1);
  });