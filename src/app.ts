import { db } from "./db";
import { Orchestrator } from "./orchestrator";
import { GateAccountManager } from "./gate";

async function main() {
  const gateAccountManager = new GateAccountManager();

  const orchestrator = new Orchestrator({
    name: "Itrader",
    context: {
      db,
      gateAccountManager,
      //тут все остальное передаем
    },
  });

  orchestrator.addOneTime("init", async (context) => {
    console.log(
      "Авторизация во всех аккаунтах доступных программе в гейте и в байбите",
    );
  });

  orchestrator.addTask({
    id: "work_acceptor",
    name: "Взять в работу все доступные транзакции со статусом 4 (panel.gate.cx)",
    fn: async (context) => {
      console.log("Взять в работу");

      //Берет в работу все транзакции со статусом 4 на гейте и добавляет все их данные в базу данных.
    },
    runOnStart: true,
    interval: 100 * 60 * 5,
  });

  // Добавить условие что есть ещё в базе данных хотябы одна выплата со статусом 4
  orchestrator.addTask({
    id: "ad_creator",
    name: "Взять из базы данных как из очереди выплату со статусом 4 и создать на ее основе транзакцию на байбите, сохраняем данные об объявлении в базе данных и создаем модель Transaction где будет ссылка на payout гейта и order\\ad bybit и чек и статус обработки в нашей системе",
    fn: async (context) => {
      console.log(
        "Создать объявление на байбите. При условии что может быть максимум 2 объявления активных на одном аккаунте байбита и методы оплаты чередуются SBP\\Tinkoff. Если СБП стоит у одного активного, значит ставим тинькофф у создаваемого",
      );
    },
    interval: 10000,
  });

  orchestrator.addTask({
    id: "ad_listener",
    name: "Пройтись по объявлениям активным в нашей базе данных с ссылкам на байбит объявления и проверить чат и ответитить на сообщение по схеме",
    fn: async (context) => {
      /*
      1. Здравствуйте!
      Оплата будет с Т банка?
      ( просто напишите да/нет)

      2. Чек в формате пдф с официальной почты Т банка сможете отправить ?
      ( просто напишите да/нет)

      3. При СБП, если оплата будет на неверный банк, деньги потеряны.
      ( просто напишите подтверждаю/ не подтверждаю)

      После чего одним смс я пришлю реквизиты, банк, почту и сумму для перевода.



      4. После того как контр присылает чек на почту и там все норм, бот закрывает заявку в айдексе, должно приходить следующее смс:

      Переходи в закрытый чат https://t.me/+nIB6kP22KmhlMmQy

      Всегда есть большой объем ЮСДТ по хорошему курсу, работаем оперативно.

      После отправки этого 4 смс должно пройти 2 минуты и только после этого бот отпускает крипту.

      --------

      Если ответил нет - транзакция (пара payout gate\order(ad) bybit) улетает в базе данных в список дураков. И эти транзакции больше вообще мы не рассматриваем.

      Реквизиты по типу Банка и номера карты или телефона (поле wallet payout gate) мы берем с гейта и сумму тоже и отправляем почту авторизованенную на которой ждем чеки.
      тут такая логика что бот пошагово общяется с контрагентом, если он ответил как-то не так, он повторяет вопрос этапа. Не обязательно клиенто может ответить к примеру да или ок или норм или ещё какие-то синонимы тоже нужно проерять у каждого варианта ответа
      */
      console.log("Проверка чата");
    },
    interval: 1000,
  });

  orchestrator.addTask({
    id: "gmail_listener",
    name: "Проверка сообщений с чеками на авторизованной почте с официального email t-bank (Tinkoff) - noreply@tinkoff.ru чек pdf. прикреплен к письму",
    fn: async (context) => {
      /*
      Тут мы когда отправили реквизиты после этого момента нужно отлавить сообщение (если сообщение до этого момента по времени, значит отновится к другой транзакции)
      Все полученные чеки мы проверяем есть ли там статус успешно, если нету, такие чеки не смотрим дальше. Если есть смотрим.
      Пришел чек, мы сверяем его поля - сумму, хотябы одно слово в поле Банк должно сопасть, и поле wallet из гейта с номером карты или телефона в чеке. В чеке номер карты если он есть скрыт и можно сравнивать только последние 4 цифры.
      Видим что чек совпал по всем параметрам сверяеммым хоть с какой-то транзакцией с гейта, мы делаем approve транзакции на гейте прикрепляя чек и меняем статус у нас в системе в базе данных у транзакции и у пары payout gate\ order(ad) bybit на успешные и ставим дату успеха со временем.
      Как только сделали успешными отправляем в чат контр агенту из инструкции выше послднее сообщение (4)
      */
      console.log("Проверка сообщения");
    },
    interval: 10000,
  });

  orchestrator.addTask({
    id: "successer",
    name: "Идет по списку успешных и смотрит прошло ли две миниты с момента успеха и если да отправляет средства (отпускает средства по объявлению на байбите)",
    fn: async (context) => {
      console.log("Успех обработка");
    },
    interval: 10000,
  });

  await orchestrator.initialize();
  await orchestrator.start();

  console.log("Orchestrator started");
}

// тут перед запуском ещё cli должно быть с добавлением\редактированием\удалением байбит и гейт аккаунтов и кнопка начать мануально и начать автоматический
// Начать мануально - где каждое действие пишет что хочет сделать и в консоли дает пользователю принять или отклонить действие.
// Автоматический - где не нужно подтверждение
main().catch(console.error);
