import { BybitClient } from "@/bybit/client";

async function main() {
  console.log("=== Bybit P2P –ú–∞—Ä–∫–µ—Ç ===\n");
  
  const client = new BybitClient();
  
  try {
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
    console.log("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit...");
    const accountId = await client.addAccount(
      "ysfXg4bN0vRMwlwYuI",
      "aIxbRqs8oqoDoqwGjEQTFsjDg68WsAxOns4n",
      false,
      "Main Account",
    );
    console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ\n");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    console.log("üìä –ë–∞–ª–∞–Ω—Å FUND:");
    const balances = await client.getP2PBalances(accountId);
    balances.forEach((b) => {
      console.log(`   ${b.coin}: ${b.free}`);
    });
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    console.log("\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:");
    const userInfo = await client.getP2PUserInfo(accountId);
    console.log(`   Nickname: ${userInfo.nickName}`);
    console.log(`   KYC: ${userInfo.kycVerifyStatus === 1 ? "‚úÖ" : "‚ùå"}`);
    
    // –ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –º–∞—Ä–∫–µ—Ç–µ
    console.log("\nüîç –û–±—ä—è–≤–ª–µ–Ω–∏—è USDT/RUB (–ø—Ä–æ–¥–∞–∂–∞):");
    try {
      const ads = await client.searchP2PAds(accountId, {
        tokenId: "USDT",
        currencyId: "RUB",
        side: "1", // –ø—Ä–æ–¥–∞–∂–∞
        page: 1,
        size: 3,
      });
      
      if (ads.list && ads.list.length > 0) {
        console.log(`   –ù–∞–π–¥–µ–Ω–æ: ${ads.count}`);
        ads.list.forEach((ad, i) => {
          console.log(`\n   ${i + 1}. ${ad.nickName}: ${ad.price} RUB`);
          console.log(`      –î–æ—Å—Ç—É–ø–Ω–æ: ${ad.lastQuantity} USDT`);
        });
      }
    } catch (error: any) {
      console.log(`   –û—à–∏–±–∫–∞: ${error.message}`);
    }
    
    // –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    console.log("\n\nüì¢ –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:");
    const myAds = await client.getMyP2PAds(accountId);
    if (myAds.length > 0) {
      myAds.forEach((ad) => {
        console.log(`   - ${ad.side === "1" ? "–ü—Ä–æ–¥–∞–∂–∞" : "–ü–æ–∫—É–ø–∫–∞"} ${ad.quantity} ${ad.tokenId}`);
      });
    } else {
      console.log("   –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π");
    }
    
  } catch (error: any) {
    console.error("\n‚ùå –û—à–∏–±–∫–∞:", error.message);
  }
}

// –ó–∞–ø—É—Å–∫
main()
  .then(() => {
    console.log("\n‚úÖ –ì–æ—Ç–æ–≤–æ!");
    process.exit(0);
  })
  .catch((error) => {
    console.error("–û—à–∏–±–∫–∞:", error);
    process.exit(1);
  });
