#!/usr/bin/env bun
/**
 * Gmail OAuth Setup - Fixed redirect_uri matching
 */

import { google } from "googleapis";
import { db } from "./src/db";
import fs from "fs/promises";
import path from "path";
import readline from "readline";

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

function question(query: string): Promise<string> {
  return new Promise((resolve) => rl.question(query, resolve));
}

async function setup() {
  console.log("\nüîê Gmail OAuth Setup (Fixed Version)");
  console.log("====================================\n");

  try {
    // Load credentials
    const credentialsPath = path.join("data", "gmail-credentials.json");
    const credentialsContent = JSON.parse(await fs.readFile(credentialsPath, "utf-8"));
    const credentials = credentialsContent.installed || credentialsContent.web || credentialsContent;
    
    // –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ redirect URI –≤–µ–∑–¥–µ
    const REDIRECT_URI = "http://localhost";
    
    console.log("üìã Configuration:");
    console.log(`   Client ID: ${credentials.client_id}`);
    console.log(`   Redirect URI: ${REDIRECT_URI}`);
    console.log(`   Time: ${new Date().toISOString()}\n`);
    
    // Create OAuth2 client with EXACT redirect URI
    const oauth2Client = new google.auth.OAuth2(
      credentials.client_id,
      credentials.client_secret,
      REDIRECT_URI  // –¢–æ—á–Ω–æ —Ç–∞–∫–æ–π –∂–µ URI –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø—Ä–∏ –æ–±–º–µ–Ω–µ –∫–æ–¥–∞
    );
    
    // Generate auth URL
    const authUrl = oauth2Client.generateAuthUrl({
      access_type: "offline",
      scope: [
        "https://www.googleapis.com/auth/gmail.readonly",
        "https://www.googleapis.com/auth/gmail.modify",
      ],
      prompt: "consent", // –§–æ—Ä—Å–∏—Ä—É–µ–º –ø–æ–∫–∞–∑ consent screen –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è refresh_token
    });
    
    console.log("üìã –ò–ù–°–¢–†–£–ö–¶–ò–ò:");
    console.log("=============\n");
    console.log("1. –û—Ç–∫—Ä–æ–π—Ç–µ –ù–û–í–û–ï –æ–∫–Ω–æ –≤ —Ä–µ–∂–∏–º–µ –∏–Ω–∫–æ–≥–Ω–∏—Ç–æ");
    console.log("2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ:");
    console.log(`\n${authUrl}\n`);
    console.log("3. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ Google");
    console.log("4. –í–∞—Å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –æ—à–∏–±–∫–æ–π 'This site can't be reached'");
    console.log("5. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ü–û–õ–ù–´–ô URL –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞");
    console.log("   –ü—Ä–∏–º–µ—Ä: http://localhost/?code=4/0AUJR-x7...&scope=...\n");
    
    const fullUrl = await question("üìã –í—Å—Ç–∞–≤—å—Ç–µ –ü–û–õ–ù–´–ô URL –∑–¥–µ—Å—å: ");
    rl.close();
    
    // Extract code from URL
    let code: string;
    try {
      const url = new URL(fullUrl.trim());
      code = url.searchParams.get("code") || "";
      
      if (!code) {
        throw new Error("–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ URL");
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ redirect_uri —Å–æ–≤–ø–∞–¥–∞–µ—Ç
      const receivedRedirectBase = `${url.protocol}//${url.host}`;
      console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ redirect_uri:`);
      console.log(`   –û–∂–∏–¥–∞–µ—Ç—Å—è: ${REDIRECT_URI}`);
      console.log(`   –ü–æ–ª—É—á–µ–Ω–æ: ${receivedRedirectBase}`);
      
      if (receivedRedirectBase !== REDIRECT_URI) {
        console.error("\n‚ùå –û–®–ò–ë–ö–ê: redirect_uri –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!");
        console.log("–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏—á–∏–Ω–æ–π –æ—à–∏–±–∫–∏ invalid_grant");
        process.exit(1);
      }
      
      console.log(`‚úÖ redirect_uri —Å–æ–≤–ø–∞–¥–∞–µ—Ç`);
      console.log(`‚úÖ –ö–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω (${code.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
      
    } catch (error) {
      console.error("\n‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ URL!");
      console.log("–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª–∏ –í–ï–°–¨ URL –≤–∫–ª—é—á–∞—è http://");
      process.exit(1);
    }
    
    // Exchange code immediately
    console.log("\nüîÑ –û–±–º–µ–Ω –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω—ã (–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ)...");
    console.log(`   –í—Ä–µ–º—è: ${new Date().toISOString()}`);
    
    try {
      // getToken –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ—Ç –∂–µ redirect_uri —á—Ç–æ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
      const { tokens } = await oauth2Client.getToken(code);
      
      console.log("\n‚úÖ –£–°–ü–ï–•! –¢–æ–∫–µ–Ω—ã –ø–æ–ª—É—á–µ–Ω—ã:");
      console.log(`   Access Token: ${tokens.access_token?.substring(0, 30)}...`);
      console.log(`   Refresh Token: ${tokens.refresh_token ? "–ü–æ–ª—É—á–µ–Ω" : "–ù–ï –ø–æ–ª—É—á–µ–Ω"}`);
      console.log(`   Expires: ${tokens.expiry_date ? new Date(tokens.expiry_date).toISOString() : "Unknown"}`);
      
      if (!tokens.refresh_token) {
        console.warn("\n‚ö†Ô∏è  Refresh token –Ω–µ –ø–æ–ª—É—á–µ–Ω!");
        console.log("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:");
        console.log("   1. –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤—ã–≤–∞–ª–∏ —ç—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–Ω–µ–µ");
        console.log("   2. –ù–µ –±—ã–ª –ø–æ–∫–∞–∑–∞–Ω consent screen");
        console.log("\n   –†–µ—à–µ–Ω–∏–µ:");
        console.log("   1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://myaccount.google.com/permissions");
        console.log("   2. –ù–∞–π–¥–∏—Ç–µ –≤–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ —É–¥–∞–ª–∏—Ç–µ –¥–æ—Å—Ç—É–ø");
        console.log("   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ setup —Å–Ω–æ–≤–∞");
      }
      
      // Get user email
      oauth2Client.setCredentials(tokens);
      const gmail = google.gmail({ version: "v1", auth: oauth2Client });
      const profile = await gmail.users.getProfile({ userId: "me" });
      const email = profile.data.emailAddress || "unknown";
      
      // Save to database
      await db.upsertGmailAccount({
        email,
        refreshToken: tokens.refresh_token || "",
      });
      
      console.log(`\n‚úÖ Gmail –∞–∫–∫–∞—É–Ω—Ç ${email} —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!`);
      
      // Save tokens backup
      const tokensDir = path.join("data", "gmail-tokens");
      await fs.mkdir(tokensDir, { recursive: true });
      const tokensPath = path.join(tokensDir, `${email}.json`);
      await fs.writeFile(tokensPath, JSON.stringify({
        ...tokens,
        saved_at: new Date().toISOString(),
        redirect_uri_used: REDIRECT_URI
      }, null, 2));
      console.log(`üíæ –¢–æ–∫–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${tokensPath}`);
      
    } catch (error: any) {
      console.error("\n‚ùå –û—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞ –∫–æ–¥–∞!");
      console.error(`–°–æ–æ–±—â–µ–Ω–∏–µ: ${error.message}`);
      
      if (error.response?.data) {
        console.error("\n–î–µ—Ç–∞–ª–∏ –æ—Ç Google:");
        console.error(JSON.stringify(error.response.data, null, 2));
      }
      
      console.log("\nüí° –ß–µ–∫-–ª–∏—Å—Ç –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã:");
      console.log("‚úì –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ù–û–í–´–ô –∫–æ–¥ (–æ—Ç–∫—Ä—ã–ª–∏ auth URL –≤ –Ω–æ–≤–æ–º –∏–Ω–∫–æ–≥–Ω–∏—Ç–æ –æ–∫–Ω–µ)");
      console.log("‚úì –û–±–º–µ–Ω—è–ª–∏ –∫–æ–¥ —Å—Ä–∞–∑—É (–≤ —Ç–µ—á–µ–Ω–∏–µ 1-2 –º–∏–Ω—É—Ç)");
      console.log("‚úì –°–∫–æ–ø–∏—Ä–æ–≤–∞–ª–∏ –í–ï–°–¨ URL –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞");
      console.log("‚úì redirect_uri —Ç–æ—á–Ω–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: " + REDIRECT_URI);
      console.log("‚úì –í Google Console –¥–æ–±–∞–≤–ª–µ–Ω —ç—Ç–æ—Ç redirect URI");
      console.log("‚úì –°–∏—Å—Ç–µ–º–Ω–æ–µ –≤—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ");
      
      // Check system time
      console.log(`\nüïê –°–∏—Å—Ç–µ–º–Ω–æ–µ –≤—Ä–µ–º—è: ${new Date().toISOString()}`);
      console.log("   –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ–≤–µ—Ä–Ω–æ–µ, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–π—Ç–µ:");
      console.log("   sudo ntpdate -s time.nist.gov");
    }
    
  } catch (error) {
    console.error("\n‚ùå –û—à–∏–±–∫–∞ setup:", error);
  }
  
  await db.disconnect();
}

setup();