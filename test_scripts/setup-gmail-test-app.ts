#!/usr/bin/env bun
/**
 * Gmail OAuth Setup using Google's test application
 * This bypasses the redirect_uri_mismatch issue
 */

import { google } from "googleapis";
import { db } from "./src/db";
import fs from "fs/promises";
import path from "path";
import readline from "readline";

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

function question(query: string): Promise<string> {
  return new Promise((resolve) => rl.question(query, resolve));
}

async function setup() {
  console.log("\nüîê Gmail OAuth Setup (Test Application Method)");
  console.log("==============================================\n");
  
  console.log("üìã –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—Ö–æ–¥–∞ –ø—Ä–æ–±–ª–µ–º —Å redirect_uri\n");

  try {
    // –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º authorization code —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä
    console.log("–®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");
    console.log("==================================\n");
    
    console.log("1. –û—Ç–∫—Ä–æ–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ –±—Ä–∞—É–∑–µ—Ä–∞ (—Ä–µ–∂–∏–º –∏–Ω–∫–æ–≥–Ω–∏—Ç–æ):\n");
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π client_id –æ—Ç Google –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const testAuthUrl = "https://accounts.google.com/o/oauth2/v2/auth?" + 
      "client_id=1058722563893-d7v8h00qclvvueh8ln8lqv6279vamk8v.apps.googleusercontent.com&" +
      "redirect_uri=urn:ietf:wg:oauth:2.0:oob:auto&" +
      "response_type=code&" +
      "scope=https://www.googleapis.com/auth/gmail.readonly%20https://www.googleapis.com/auth/gmail.modify&" +
      "access_type=offline&" +
      "prompt=consent";
    
    console.log(testAuthUrl + "\n");
    
    console.log("2. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ Google");
    console.log("3. –í—ã —É–≤–∏–¥–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∫–æ–¥–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");
    console.log("4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ (–≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ 4/0AUJR-x7...)\n");
    
    const authCode = await question("üìã –í—Å—Ç–∞–≤—å—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ");
    
    if (!authCode || authCode.trim().length === 0) {
      console.error("\n‚ùå –ö–æ–¥ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω!");
      process.exit(1);
    }
    
    console.log("\nüîÑ –û–±–º–µ–Ω –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω—ã...");
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ credentials
    const testOAuth2Client = new google.auth.OAuth2(
      "1058722563893-d7v8h00qclvvueh8ln8lqv6279vamk8v.apps.googleusercontent.com",
      "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",
      "urn:ietf:wg:oauth:2.0:oob:auto"
    );
    
    try {
      const { tokens } = await testOAuth2Client.getToken(authCode.trim());
      
      console.log("\n‚úÖ –¢–æ–∫–µ–Ω—ã –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!");
      console.log(`   Access Token: ${tokens.access_token?.substring(0, 30)}...`);
      console.log(`   Refresh Token: ${tokens.refresh_token ? "–ü–æ–ª—É—á–µ–Ω" : "–ù–ï –ø–æ–ª—É—á–µ–Ω"}`);
      
      if (!tokens.refresh_token) {
        console.error("\n‚ùå Refresh token –Ω–µ –ø–æ–ª—É—á–µ–Ω!");
        console.log("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å –Ω–æ–≤—ã–º –∫–æ–¥–æ–º");
        process.exit(1);
      }
      
      // –®–∞–≥ 2: –ü–µ—Ä–µ–Ω–æ—Å–∏–º refresh token –≤ –≤–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
      console.log("\n\n–®–∞–≥ 2: –ü–µ—Ä–µ–Ω–æ—Å —Ç–æ–∫–µ–Ω–æ–≤ –≤ –≤–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ");
      console.log("=========================================\n");
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—à–∏ credentials
      const credentialsPath = path.join("data", "gmail-credentials.json");
      const credentialsContent = JSON.parse(await fs.readFile(credentialsPath, "utf-8"));
      const yourCredentials = credentialsContent.installed || credentialsContent.web || credentialsContent;
      
      // –°–æ–∑–¥–∞–µ–º OAuth –∫–ª–∏–µ–Ω—Ç —Å –≤–∞—à–∏–º–∏ credentials
      const yourOAuth2Client = new google.auth.OAuth2(
        yourCredentials.client_id,
        yourCredentials.client_secret,
        "http://localhost"
      );
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º refresh token
      yourOAuth2Client.setCredentials({
        refresh_token: tokens.refresh_token
      });
      
      // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π access token —Å –≤–∞—à–∏–º–∏ credentials
      console.log("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ access token —Å –≤–∞—à–∏–º–∏ credentials...");
      const { credentials: newTokens } = await yourOAuth2Client.refreshAccessToken();
      
      console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π access token!");
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É —Å Gmail API
      const gmail = google.gmail({ version: "v1", auth: yourOAuth2Client });
      const profile = await gmail.users.getProfile({ userId: "me" });
      const email = profile.data.emailAddress || "unknown";
      
      console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω Gmail –∞–∫–∫–∞—É–Ω—Ç: ${email}`);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      await db.upsertGmailAccount({
        email,
        refreshToken: tokens.refresh_token!,
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–æ–∫–µ–Ω–æ–≤
      const tokensDir = path.join("data", "gmail-tokens");
      await fs.mkdir(tokensDir, { recursive: true });
      const tokensPath = path.join(tokensDir, `${email}.json`);
      await fs.writeFile(tokensPath, JSON.stringify({
        ...newTokens,
        refresh_token: tokens.refresh_token,
        obtained_via: "test_app_method",
        saved_at: new Date().toISOString()
      }, null, 2));
      
      console.log(`\n‚úÖ Gmail –∞–∫–∫–∞—É–Ω—Ç ${email} —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!`);
      console.log(`üíæ –¢–æ–∫–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${tokensPath}`);
      
      console.log("\n‚ö†Ô∏è  –í–ê–ñ–ù–û: –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.");
      console.log("–î–ª—è production —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π OAuth –∫–ª–∏–µ–Ω—Ç –≤ Google Console.");
      
    } catch (error: any) {
      console.error("\n‚ùå –û—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞ –∫–æ–¥–∞!");
      console.error(`–°–æ–æ–±—â–µ–Ω–∏–µ: ${error.message}`);
      
      if (error.message?.includes("invalid_grant")) {
        console.log("\nüí° –†–µ—à–µ–Ω–∏–µ:");
        console.log("1. –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –≤ –ù–û–í–û–ú –æ–∫–Ω–µ –∏–Ω–∫–æ–≥–Ω–∏—Ç–æ");
        console.log("2. –ü–æ–ª—É—á–∏—Ç–µ –ù–û–í–´–ô –∫–æ–¥");
        console.log("3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–¥ –°–†–ê–ó–£ (–≤ —Ç–µ—á–µ–Ω–∏–µ 1-2 –º–∏–Ω—É—Ç)");
      }
    }
    
  } catch (error) {
    console.error("\n‚ùå –û—à–∏–±–∫–∞:", error);
  } finally {
    rl.close();
  }
  
  await db.disconnect();
}

setup();