#!/usr/bin/env bun
/**
 * Gmail OAuth Setup using OAuth 2.0 Playground method
 */

import { google } from "googleapis";
import { db } from "./src/db";
import fs from "fs/promises";
import path from "path";
import readline from "readline";

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

function question(query: string): Promise<string> {
  return new Promise((resolve) => rl.question(query, resolve));
}

async function setup() {
  console.log("\nüîê Gmail OAuth Setup (OAuth Playground Method)");
  console.log("=============================================\n");

  try {
    // Load credentials to get client ID and secret
    const credentialsPath = path.join("data", "gmail-credentials.json");
    const credentialsContent = JSON.parse(await fs.readFile(credentialsPath, "utf-8"));
    const credentials = credentialsContent.installed || credentialsContent.web || credentialsContent;
    
    console.log("üìã –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ OAuth 2.0 Playground:\n");
    
    console.log("1. –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ:");
    console.log("   https://developers.google.com/oauthplayground/\n");
    
    console.log("2. –í –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —à–µ—Å—Ç–µ—Ä–µ–Ω–∫—É ‚öôÔ∏è (OAuth 2.0 configuration)");
    console.log("   - –ü–æ—Å—Ç–∞–≤—å—Ç–µ –≥–∞–ª–æ—á–∫—É 'Use your own OAuth credentials'");
    console.log("   - OAuth Client ID: " + credentials.client_id);
    console.log("   - OAuth Client secret: " + credentials.client_secret);
    console.log("   - –ù–∞–∂–º–∏—Ç–µ 'Close'\n");
    
    console.log("3. –í –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –Ω–∞–π–¥–∏—Ç–µ 'Gmail API v1' –∏ –≤—ã–±–µ—Ä–∏—Ç–µ:");
    console.log("   - https://www.googleapis.com/auth/gmail.readonly");
    console.log("   - https://www.googleapis.com/auth/gmail.modify\n");
    
    console.log("4. –ù–∞–∂–º–∏—Ç–µ 'Authorize APIs'");
    console.log("5. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ Google");
    console.log("6. –ù–∞–∂–º–∏—Ç–µ 'Exchange authorization code for tokens'");
    console.log("7. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ 'Refresh token'\n");
    
    const refreshToken = await question("üìã –í—Å—Ç–∞–≤—å—Ç–µ Refresh Token: ");
    const email = await question("üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à Gmail email: ");
    rl.close();
    
    if (!refreshToken || !email) {
      console.error("\n‚ùå Refresh token –∏ email –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!");
      process.exit(1);
    }
    
    console.log("\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞...");
    
    // Create OAuth2 client and set refresh token
    const oauth2Client = new google.auth.OAuth2(
      credentials.client_id,
      credentials.client_secret,
      "http://localhost"
    );
    
    oauth2Client.setCredentials({
      refresh_token: refreshToken.trim()
    });
    
    try {
      // Test by getting access token
      const { credentials: newTokens } = await oauth2Client.refreshAccessToken();
      console.log("‚úÖ Refresh token —Ä–∞–±–æ—Ç–∞–µ—Ç!");
      
      // Verify with Gmail API
      const gmail = google.gmail({ version: "v1", auth: oauth2Client });
      const profile = await gmail.users.getProfile({ userId: "me" });
      
      console.log(`‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω email: ${profile.data.emailAddress}`);
      
      // Save to database
      await db.upsertGmailAccount({
        email: email.trim(),
        refreshToken: refreshToken.trim(),
      });
      
      console.log(`\n‚úÖ Gmail –∞–∫–∫–∞—É–Ω—Ç ${email} —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!`);
      
      // Save tokens backup
      const tokensDir = path.join("data", "gmail-tokens");
      await fs.mkdir(tokensDir, { recursive: true });
      const tokensPath = path.join(tokensDir, `${email}.json`);
      await fs.writeFile(tokensPath, JSON.stringify({
        refresh_token: refreshToken.trim(),
        ...newTokens,
        saved_at: new Date().toISOString()
      }, null, 2));
      console.log(`üíæ –¢–æ–∫–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${tokensPath}`);
      
    } catch (error: any) {
      console.error("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞!");
      console.error(`–°–æ–æ–±—â–µ–Ω–∏–µ: ${error.message}`);
      console.log("\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:");
      console.log("1. –ù–µ–≤–µ—Ä–Ω—ã–π refresh token");
      console.log("2. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ client_id –∏–ª–∏ client_secret");
      console.log("3. –¢–æ–∫–µ–Ω –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è");
    }
    
  } catch (error) {
    console.error("\n‚ùå –û—à–∏–±–∫–∞:", error);
  }
  
  await db.disconnect();
}

setup();